
name: Build , push docker image to digial ocean cluster to test

on:
  push:
    branches: [ "test" ]
  pull_request:
    branches: [ "test" ]
  workflow_dispatch:

env:
  NAME_SPACE: test
  EXT_PORT: 8080
  INT_PORT: 8080
  IMAGE_NAME: ndemeyvan/express_app_test
  IMAGE_ARTEFACT_NAME: express_app_test

jobs:
# # # # # # # # # # # # # # Build
  build:
    runs-on: ${{matrix.os}}

    strategy:
      matrix:
        node-version: [16.x]
        os: [ubuntu-latest]

    steps:
#     Checkouk sur le code actuel
    - name: Checkout to the actual code
      uses: actions/checkout@v3 
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.IMAGE_NAME }}:latest
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          outputs: type=docker,dest=/tmp/${{env.IMAGE_ARTEFACT_NAME}}.tar

    # - name: Build & push Docker image
    #   uses: mr-smithers-excellent/docker-build-push@v5
    #   with:
    #     image: ${{ env.IMAGE_NAME }}
    #     tags: latest
    #     registry: docker.io
    #     dockerfile: Dockerfile
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}
    #     outputs: type=oci,dest=/tmp/${{ env.IMAGE_NAME }}.tar

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
          name: ${{env.IMAGE_ARTEFACT_NAME}}
          path: /tmp/${{env.IMAGE_ARTEFACT_NAME}}.tar
  
# # # # # # # # # # # # # # Test

  test:
    needs: build 
    runs-on: ${{matrix.os}}

    strategy:
      matrix:
        node-version: [16.x]
        os: [ubuntu-latest]

    steps:
# Download artifact
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
           name: ${{env.IMAGE_ARTEFACT_NAME }}
           path: /tmp
# Load l'image 
      - name: Load Docker image
        run: docker load --input /tmp/${{env.IMAGE_ARTEFACT_NAME }}.tar

      - name: Display all docker images
        run: docker images

      - name: create docker container ${{env.IMAGE_ARTEFACT_NAME }}
        run: docker run -d -p ${{env.EXT_PORT}}:${{env.INT_PORT}} --name  ${{ env.IMAGE_NAME }}  ${{env.IMAGE_ARTEFACT_NAME }}

      - name: Wait the container start
        run: sleep 5

      - name: Curl the localhost address
        run: curl localhost:${{env.EXT_PORT}} | grep "Hello"

# # # # # # # # # # # # # # Deployment
  # deploy: 
  #   needs: test 
  #   runs-on: ${{matrix.os}}

  #   strategy:
  #     matrix:
  #       node-version: [16.x]
  #       os: [ubuntu-latest]

  #   steps:
  #   - name: Set up kubectl
  #     uses: matootie/dokube@v1.4.0
  #     with:
  #       personalAccessToken: ${{ secrets.DIGITALOCEAN_TOKEN }}
  #       clusterName: ${{ secrets.CLUSTER_NAME }}

  #   - name: Checkout to the actual code
  #     uses: actions/checkout@v3

  #   # Run any kubectl commands you want!
  #   - name: Create namespace
  #     run: kubectl create namespace ${{ env.NAME_SPACE }} | echo "Name space already exist"
  #   - name: restart deployment
  #     run: kubectl -n ${{ env.NAME_SPACE }} rollout restart deploy | echo "Empty deployment"
  #   - name: Apply all k8s object
  #     run: kubectl -n test apply -f k8s/


